// Copyright Epic Games, Inc. All Rights Reserved.

#include "BuccaneerCommon.h"
#include "Logging/LogMacros.h"

DEFINE_LOG_CATEGORY(BuccaneerCommon);


FBuccaneerCommonModule* FBuccaneerCommonModule::BuccaneerCommonModule = nullptr;

void FBuccaneerCommonModule::StartupModule()
{
    Setup();
    CVarBuccaneerEnableStats = IConsoleManager::Get().RegisterConsoleVariable(
        TEXT("Buccaneer.EnableStats"),
        true,
        TEXT("Disables the collection of and logging of performance metrics"),
        ECVF_Default);

    CVarBuccaneerEnableEvents = IConsoleManager::Get().RegisterConsoleVariable(
        TEXT("Buccaneer.EnableEvents"),
        true,
        TEXT("Disables the collection and logging of semantic events"),
        ECVF_Default);

}


void FBuccaneerCommonModule::ShutdownModule()
{
}

void FBuccaneerCommonModule::Setup()
{
    ParseCommandLineOption(TEXT("BuccaneerEnablePerformanceStats"), CVarBuccaneerEnableStats);
    ParseCommandLineOption(TEXT("BuccaneerEnableEvents"), CVarBuccaneerEnableEvents);

    if (!FParse::Value(FCommandLine::Get(), TEXT("StatsEmitterURL="), StatsEmitterURL) && CVarBuccaneerEnableStats->GetBool())
	{
		UE_LOG(BuccaneerCommon, Warning, TEXT("Performance logging is disabled, provide `StatsEmitterURL` cmd-args to enable it"));
        CVarBuccaneerEnableStats->Set(false, ECVF_SetByCommandline);
	}

    if (!FParse::Value(FCommandLine::Get(), TEXT("EventEmitterURL="), EventEmitterURL) && CVarBuccaneerEnableEvents->GetBool())
	{
		UE_LOG(BuccaneerCommon, Warning, TEXT("Semantic Event Logging is disabled, provide `EventEmitterURL` cmd-args to enable it"));
        CVarBuccaneerEnableEvents->Set(false, ECVF_SetByCommandline);
	}

    if (!FParse::Value(FCommandLine::Get(), TEXT("InstanceID="), ID))
	{
        UE_LOG(BuccaneerCommon, Log, TEXT("Instance ID not provided. ID will be generated by the stats server"));
	}

    // Additional Metadata    
    FString CmdLineMetadata;
    MetadataJson = MakeShareable(new FJsonObject());
    if (CVarBuccaneerEnableStats->GetBool() && FParse::Value(FCommandLine::Get(), TEXT("StatsMetadata="), CmdLineMetadata))
	{
        UE_LOG(BuccaneerCommon, Warning, TEXT("%s"), *CmdLineMetadata);
        TArray<FString> ParsedMetadata;
        CmdLineMetadata.ParseIntoArray(ParsedMetadata, TEXT(";"), false);
        for(auto Element : ParsedMetadata) 
        {
            FString Key, Value;
            Element.Split(TEXT(":"), &Key, &Value);
            RegisterMetadata(Key, Value); 
        }
	}

    // We need to get an ID from the server
    if(StatsEmitterURL != "" && ID == "")
    {
        TSharedPtr<FJsonObject> JsonObject = MakeShareable(new FJsonObject());
        JsonObject->SetField("metadata", MakeShared<FJsonValueObject>(MetadataJson));
        SendHTTPWithResponse((StatsEmitterURL + FString("/setup")), JsonObject);
    }
}


void FBuccaneerCommonModule::RegisterMetadata(FString Key, FString Value)
{
    MetadataJson->SetField(*Key, MakeShared<FJsonValueString>((TEXT("%s"), *Value)));
}

FBuccaneerCommonModule* FBuccaneerCommonModule::GetModule()
{
    if(BuccaneerCommonModule)
    {
        return BuccaneerCommonModule;
    }
    FBuccaneerCommonModule* Module = FModuleManager::Get().LoadModulePtr<FBuccaneerCommonModule>("BuccaneerCommon");
    if(Module)
    {
        BuccaneerCommonModule = Module;
    }
    return BuccaneerCommonModule;
}


void FBuccaneerCommonModule::SendHTTP(FString URL, TSharedPtr<FJsonObject> JsonObject)
{
    FHttpRequestRef HttpRequest = FHttpModule::Get().CreateRequest();
    
    FString body;
	TSharedRef<TJsonWriter<>> JsonWriter = TJsonWriterFactory<>::Create(&body);
	if (!ensure(FJsonSerializer::Serialize(JsonObject.ToSharedRef(), JsonWriter)))
	{   
    	UE_LOG(BuccaneerCommon, Warning, TEXT("Cannot serialize json object"));
    }

    HttpRequest->SetURL(URL);
    HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json"));
    HttpRequest->SetVerb(TEXT("POST"));
    HttpRequest->SetContentAsString(body);
    bool bInFlight = true;
    HttpRequest->OnProcessRequestComplete().BindLambda(
        [&bInFlight](FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded)
        {
            FString ResponseStr, ErrorStr;

            if (bSucceeded && HttpResponse.IsValid())
            {
                ResponseStr = HttpResponse->GetContentAsString();
                if (EHttpResponseCodes::IsOk(HttpResponse->GetResponseCode()))
                {
                    // UE_LOG(BuccaneerCommon, VeryVerbose, TEXT("Push event response: code=%d response=%s"),
                    //     HttpResponse->GetResponseCode(), *ResponseStr);
                }
                else
                {
                    ErrorStr = FString::Printf(TEXT("Invalid response. code=%d error=%s"),
                        HttpResponse->GetResponseCode(), *ResponseStr);
                }
            }
            else
            {
                ErrorStr = TEXT("No response");
            }

            if (!ErrorStr.IsEmpty())
            {
                UE_LOG(BuccaneerCommon, Warning, TEXT("Push event response: %s"), *ErrorStr);
            }

            bInFlight = false;
        }
    );
    HttpRequest->ProcessRequest();

}


void FBuccaneerCommonModule::SendHTTPWithResponse(FString URL, TSharedPtr<FJsonObject> JsonObject) 
{
    FHttpRequestRef HttpRequest = FHttpModule::Get().CreateRequest();
    
    FString body;
	TSharedRef<TJsonWriter<>> JsonWriter = TJsonWriterFactory<>::Create(&body);
	if (!ensure(FJsonSerializer::Serialize(JsonObject.ToSharedRef(), JsonWriter)))
	{   
    	UE_LOG(BuccaneerCommon, Warning, TEXT("Cannot serialize json object"));
    }

    HttpRequest->SetURL(URL);
    HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json"));
    HttpRequest->SetVerb(TEXT("POST"));
    HttpRequest->SetContentAsString(body);
    bool bInFlight = true;
    HttpRequest->OnProcessRequestComplete().BindLambda(
        [&](FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded)
        {
            FString ResponseStr, ErrorStr;

            if (bSucceeded && HttpResponse.IsValid())
            {
                ResponseStr = HttpResponse->GetContentAsString();
                if (EHttpResponseCodes::IsOk(HttpResponse->GetResponseCode()))
                {
                    this->HandleResponse(ResponseStr);
                    // UE_LOG(BuccaneerCommon, VeryVerbose, TEXT("Push event response: code=%d response=%s"),
                    //     HttpResponse->GetResponseCode(), *ResponseStr);
                }
                else
                {
                    ErrorStr = FString::Printf(TEXT("Invalid response. code=%d error=%s"),
                        HttpResponse->GetResponseCode(), *ResponseStr);
                }
            }
            else
            {
                ErrorStr = TEXT("No response");
            }

            if (!ErrorStr.IsEmpty())
            {
                UE_LOG(BuccaneerCommon, Warning, TEXT("Push event response: %s"), *ErrorStr);
            }

            bInFlight = false;
        }
    );
    HttpRequest->ProcessRequest(); 
}


void FBuccaneerCommonModule::HandleResponse(FString ResponseString)
    {
    TSharedPtr<FJsonObject> ParsedJson;
    TSharedRef<TJsonReader<TCHAR>> JsonReader = TJsonReaderFactory<TCHAR>::Create(ResponseString);
    if(FJsonSerializer::Deserialize(JsonReader, ParsedJson))
    {
            this->ID = ParsedJson->GetStringField("id");
            this->RegisterMetadata("id", this->ID);
            this->SetupComplete.Broadcast();
    }   
    else 
    {
        UE_LOG(BuccaneerCommon, VeryVerbose, TEXT("Failed to deserialize HTTP response"));
    }
}


void FBuccaneerCommonModule::ParseCommandLineOption(const TCHAR* Match, IConsoleVariable* CVar)
{
	FString ValueMatch(Match);
	ValueMatch.Append(TEXT("="));
	FString Value;
	if (FParse::Value(FCommandLine::Get(), *ValueMatch, Value))
	{
		if (Value.Equals(FString(TEXT("true")), ESearchCase::IgnoreCase))
		{
			CVar->Set(true, ECVF_SetByCommandline);
		}
		else if (Value.Equals(FString(TEXT("false")), ESearchCase::IgnoreCase))
		{
			CVar->Set(false, ECVF_SetByCommandline);
		}
	}
	else if (FParse::Param(FCommandLine::Get(), Match))
	{
		CVar->Set(true, ECVF_SetByCommandline);
	}
}


IMPLEMENT_MODULE(FBuccaneerCommonModule, BuccaneerCommon)